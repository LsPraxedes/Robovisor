{"version": "1.0.0", "mode": "python", "content": "from machine import Pin, PWM\nfrom time import sleep, ticks_ms\n\n# Bot\u00f5es\nbutton_a = Pin(14, Pin.IN, Pin.PULL_DOWN)\nbutton_b = Pin(15, Pin.IN, Pin.PULL_DOWN)\n\n# Motor BDLC com ESC interno\nmotor_pwm = PWM(Pin(16))\nmotor_pwm.freq(500)  # Frequ\u00eancia anal\u00f3gica comum para ESCs\n\n# Servo motor\nservo_pwm = PWM(Pin(17))\nservo_pwm.freq(50)  # Frequ\u00eancia padr\u00e3o de servos\n\n# Duty cycle para o motor (valores de 10% a 90%)\nmotor_duties = [6553, 16384, 26214, 36044, 45875, 58981]  # 0% at\u00e9 100%\ncurrent_motor_index = 0\n\n# \u00c2ngulos do servo motor\nservo_positions = [2600, 7700, 12800, 7700, 2600]\nservo_index = 0\n\nwhile True:\n    # Bot\u00e3o A: controlar velocidade\n    if button_a.value() == 1:\n        press_time = ticks_ms()\n        while button_a.value() == 1:\n            pass\n        hold_duration = ticks_ms() - press_time\n\n        if hold_duration > 2000:\n            current_motor_index = 0\n        else:\n            if current_motor_index < len(motor_duties) - 1:\n                current_motor_index += 1\n\n        motor_pwm.duty_u16(motor_duties[current_motor_index])\n        sleep(0.3)\n\n    # Bot\u00e3o B: controlar servo\n    if button_b.value() == 1:\n        servo_pwm.duty_u16(servo_positions[servo_index])\n        servo_index = (servo_index + 1) % len(servo_positions)\n        sleep(0.3)\n"}